@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using DynamicFormsApp.Shared
@using Microsoft.JSInterop
@using System.IO
@inject IJSRuntime JS
@inject HttpClient Http
@implements IDisposable

<div class="card mb-3 shadow-sm field-card" @attributes="AdditionalAttributes">
    <div class="card-body">
        <div class="d-flex justify-content-between mb-2">
            <div class="d-flex align-items-center gap-2">
                <span class="drag-handle text-muted"><span class="material-icons fs-4">drag_indicator</span></span>
                @if (Field.FieldType != "image" && Field.FieldType != "statictext")
                {
                    <input class="form-control form-control-sm" placeholder="Field label" @bind="Field.Label" />
                }
                <span class="badge bg-secondary">@GetTypeLabel(Field.FieldType)</span>
            </div>
            <div class="d-flex gap-2">
                @if (Field.FieldType is "radio" or "checkbox" or "dropdown" or 
                    "grid_radio" or "grid_checkbox" or "grid_text")
                {
                    <button class="btn btn-sm btn-outline-primary" title="Save as component" @onclick="() => OnSaveComponent.InvokeAsync(Field)">
                        <span class="material-icons">save</span>
                    </button>
                }
                <button class="btn btn-outline-danger btn-sm p-1" @onclick="() => OnRemove.InvokeAsync(Field)">
                    <span class="material-icons" style="font-size:16px;line-height:1">delete</span>
                </button>
            </div>
        </div>

        @if (Field.FieldType is "text" or "textarea")
        {
            <div class="mb-3">
                <label class="form-label">Placeholder Text</label>
                <input class="form-control" @bind="Field.Placeholder" placeholder="e.g., Enter your answer" />
                <div class="form-text">Shown inside the field until the user enters a value.</div>
            </div>
            <div class="mb-3">
                <label class="form-label">Character Limits</label>
                <div class="d-flex gap-2">
                    <input type="number" class="form-control form-control-sm" style="width:6rem;" @bind="Field.MinCharLimit" min="0" placeholder="Min" />
                    <input type="number" class="form-control form-control-sm" style="width:6rem;" @bind="Field.CharLimit" min="1" placeholder="Max" />
                </div>
            </div>
        }

        @if (Field.FieldType == "statictext")
        {
            <div class="mb-3">
                <label class="form-label">Text</label>
                <textarea class="form-control" @bind="Field.Label" placeholder="Enter text"></textarea>
            </div>
        }

        @if (Field.FieldType is "radio" or "checkbox" or "dropdown")
        {
            <label class="form-label mt-3">Options</label>
            <div @ref="optionsRef">
                @foreach (var (opt, index) in Field.OptionItems.Select((val, idx) => (val, idx)))
                {
                    <div class="d-flex align-items-center mb-1">
                        <input class="form-control flex-grow-1" @bind="Field.OptionItems[index]" />
                        <div class="btn-group btn-group-sm ms-1">
                            <button class="btn btn-outline-secondary" @onclick="() => MoveOptionUp(index)"><span class="material-icons">arrow_upward</span></button>
                            <button class="btn btn-outline-secondary" @onclick="() => MoveOptionDown(index)"><span class="material-icons">arrow_downward</span></button>
                        </div>
                        <button class="btn btn-outline-danger btn-sm ms-1" @onclick="() => Field.OptionItems.RemoveAt(index)">×</button>
                    </div>
                }
            </div>
            <div class="d-flex gap-2 mt-1">
                <button class="btn btn-sm btn-outline-primary" @onclick="AddOption">+ Add Option</button>
                <button class="btn btn-sm btn-outline-secondary" @onclick="SortOptions">Sort A-Z</button>
            </div>
        }
        else if (Field.FieldType == "grid_text")
        {
            <div class="mt-3">
                <label class="form-label">Grid Columns</label>
                <div @ref="gridColsRef">
                    @foreach (var (col, idx) in Field.GridColumns.Select((c, i) => (c, i)))
                    {
                        <div class="d-flex align-items-center mb-1">
                            <input class="form-control flex-grow-1" @bind="Field.GridColumns[idx]" />
                            <div class="btn-group btn-group-sm ms-1">
                                <button class="btn btn-outline-secondary" @onclick="() => MoveColumnUp(idx)"><span class="material-icons">arrow_upward</span></button>
                                <button class="btn btn-outline-secondary" @onclick="() => MoveColumnDown(idx)"><span class="material-icons">arrow_downward</span></button>
                            </div>
                            <button class="btn btn-outline-danger btn-sm ms-1" @onclick="() => Field.GridColumns.RemoveAt(idx)">×</button>
                        </div>
                    }
                </div>
                <div class="d-flex gap-2 mt-1">
                    <button class="btn btn-sm btn-outline-primary" @onclick="AddColumn">+ Add Column</button>
                    <button class="btn btn-sm btn-outline-secondary" @onclick="SortColumns">Sort A-Z</button>
                </div>
            </div>
        }
        else if (Field.FieldType.StartsWith("grid"))
        {
            <div class="row mt-3">
                <div class="col-md-6">
                    <label class="form-label">Grid Rows</label>
                    <div @ref="gridRowsRef">
                        @foreach (var (row, idx) in Field.GridRows.Select((r, i) => (r, i)))
                        {
                            <div class="d-flex align-items-center mb-1">
                                <input class="form-control flex-grow-1" @bind="Field.GridRows[idx]" />
                                <div class="btn-group btn-group-sm ms-1">
                                    <button class="btn btn-outline-secondary" @onclick="() => MoveRowUp(idx)"><span class="material-icons">arrow_upward</span></button>
                                    <button class="btn btn-outline-secondary" @onclick="() => MoveRowDown(idx)"><span class="material-icons">arrow_downward</span></button>
                                </div>
                                <button class="btn btn-outline-danger btn-sm ms-1" @onclick="() => Field.GridRows.RemoveAt(idx)">×</button>
                            </div>
                        }
                    </div>
                    <div class="d-flex gap-2 mt-1">
                        <button class="btn btn-sm btn-outline-primary" @onclick="AddRow">+ Add Row</button>
                        <button class="btn btn-sm btn-outline-secondary" @onclick="SortRows">Sort A-Z</button>
                    </div>
                </div>
                <div class="col-md-6">
                    <label class="form-label">Grid Columns</label>
                    <div @ref="gridColsRef">
                        @foreach (var (col, idx) in Field.GridColumns.Select((c, i) => (c, i)))
                        {
                            <div class="d-flex align-items-center mb-1">
                                <input class="form-control flex-grow-1" @bind="Field.GridColumns[idx]" />
                                <div class="btn-group btn-group-sm ms-1">
                                    <button class="btn btn-outline-secondary" @onclick="() => MoveColumnUp(idx)"><span class="material-icons">arrow_upward</span></button>
                                    <button class="btn btn-outline-secondary" @onclick="() => MoveColumnDown(idx)"><span class="material-icons">arrow_downward</span></button>
                                </div>
                                <button class="btn btn-outline-danger btn-sm ms-1" @onclick="() => Field.GridColumns.RemoveAt(idx)">×</button>
                            </div>
                        }
                    </div>
                    <div class="d-flex gap-2 mt-1">
                        <button class="btn btn-sm btn-outline-primary" @onclick="AddColumn">+ Add Column</button>
                        <button class="btn btn-sm btn-outline-secondary" @onclick="SortColumns">Sort A-Z</button>
                    </div>
                </div>
            </div>
        }
        else if (Field.FieldType == "scale")
        {
            <div class="row mt-3">
                <div class="col">
                    <label>Scale Min</label>
                    <input type="number" class="form-control" @bind="Field.ScaleMin" />
                </div>
                <div class="col">
                    <label>Scale Max</label>
                    <input type="number" class="form-control" @bind="Field.ScaleMax" />
                </div>
            </div>
        }
        else if (Field.FieldType == "image")
        {
            <div class="mb-3">
                <InputFile OnChange="OnImageSelected" @ref="imageInput" style="display:none" accept="image/*" />
                @if (!string.IsNullOrWhiteSpace(Field.ImageUrl))
                {
                    <div class="image-resize-wrapper mt-2" @ref="imageContainerRef" @onclick="PromptImageUpload">
                        <img src="/@Field.ImageUrl" style="@GetImageStyle()" />
                    </div>
                }
                else
                {
                    <div class="border rounded p-3 text-center" @onclick="PromptImageUpload">
                        Click to upload image
                    </div>
                }
            </div>
        }

        @if (Field.FieldType != "title" && Field.FieldType != "section" && Field.FieldType != "image" && Field.FieldType != "statictext")
        {
            <div class="form-check mt-3">
                <input class="form-check-input" type="checkbox" @bind="Field.IsRequired" />
                <label class="form-check-label">Required</label>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public DesignerField Field { get; set; }
    [Parameter] public EventCallback<DesignerField> OnRemove { get; set; }
    [Parameter] public EventCallback<DesignerField> OnSaveComponent { get; set; }
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> AdditionalAttributes { get; set; } = new();

    ElementReference optionsRef;
    ElementReference gridRowsRef;
    ElementReference gridColsRef;
    ElementReference imageContainerRef;
    InputFile? imageInput;
    bool imageResizeInit;
    bool fileDialogShown;
    DotNetObjectReference<FieldEditor>? objRef;

    string GetTypeLabel(string type) => type switch
    {
        "text" => "Short Answer",
        "textarea" => "Paragraph",
        "radio" => "Multiple Choice",
        "checkbox" => "Checkbox",
        "dropdown" => "Dropdown",
        "user" => "User Dropdown",
        "department" => "Department Dropdown",
        "location" => "Location Dropdown",
        "date" => "Date",
        "time" => "Time",
        "datetime" => "Date Time",
        "scale" => "Linear Scale",
        "grid_radio" => "Choice Grid",
        "grid_checkbox" => "Checkbox Grid",
        "grid_text" => "Text Grid",
        "title" => "Title",
        "section" => "Section",
        "file" => "Upload File",
        "image" => "Image",
        "statictext" => "Text",
        _ => type
    };

    string GetImageStyle() =>
        $"max-width:100%;{(Field.ImageWidth.HasValue ? $"width:{Field.ImageWidth}px;" : string.Empty)}{(Field.ImageHeight.HasValue ? $"height:{Field.ImageHeight}px;" : string.Empty)}";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (Field.FieldType == "image")
        {
            if (string.IsNullOrWhiteSpace(Field.ImageUrl) && !fileDialogShown)
            {
                fileDialogShown = true;
                await JS.InvokeVoidAsync("triggerClick", imageInput?.Element);
            }
            else if (!string.IsNullOrWhiteSpace(Field.ImageUrl) && !imageResizeInit)
            {
                imageResizeInit = true;
                objRef = DotNetObjectReference.Create(this);
                await JS.InvokeVoidAsync("initImageResize", imageContainerRef, objRef);
            }
        }
    }

    void MoveOptionUp(int index)
    {
        if (index <= 0) return;
        (Field.OptionItems[index - 1], Field.OptionItems[index]) = (Field.OptionItems[index], Field.OptionItems[index - 1]);
    }

    void MoveOptionDown(int index)
    {
        if (index >= Field.OptionItems.Count - 1) return;
        (Field.OptionItems[index + 1], Field.OptionItems[index]) = (Field.OptionItems[index], Field.OptionItems[index + 1]);
    }

    void MoveRowUp(int index)
    {
        if (index <= 0) return;
        (Field.GridRows[index - 1], Field.GridRows[index]) = (Field.GridRows[index], Field.GridRows[index - 1]);
    }

    void MoveRowDown(int index)
    {
        if (index >= Field.GridRows.Count - 1) return;
        (Field.GridRows[index + 1], Field.GridRows[index]) = (Field.GridRows[index], Field.GridRows[index + 1]);
    }

    void MoveColumnUp(int index)
    {
        if (index <= 0) return;
        (Field.GridColumns[index - 1], Field.GridColumns[index]) = (Field.GridColumns[index], Field.GridColumns[index - 1]);
    }

    void MoveColumnDown(int index)
    {
        if (index >= Field.GridColumns.Count - 1) return;
        (Field.GridColumns[index + 1], Field.GridColumns[index]) = (Field.GridColumns[index], Field.GridColumns[index + 1]);
    }

    void SortOptions()
    {
        Field.OptionItems = Field.OptionItems.OrderBy(o => o, StringComparer.OrdinalIgnoreCase).ToList();
    }

    void SortRows()
    {
        Field.GridRows = Field.GridRows.OrderBy(o => o, StringComparer.OrdinalIgnoreCase).ToList();
    }

    void SortColumns()
    {
        Field.GridColumns = Field.GridColumns.OrderBy(o => o, StringComparer.OrdinalIgnoreCase).ToList();
    }

    async Task AddOption()
    {
        Field.OptionItems.Add(string.Empty);
        await InvokeAsync(StateHasChanged);
        await JS.InvokeVoidAsync("focusLastInput", optionsRef);
    }

    async Task AddRow()
    {
        Field.GridRows.Add(string.Empty);
        await InvokeAsync(StateHasChanged);
        await JS.InvokeVoidAsync("focusLastInput", gridRowsRef);
    }

    async Task AddColumn()
    {
        Field.GridColumns.Add(string.Empty);
        await InvokeAsync(StateHasChanged);
        await JS.InvokeVoidAsync("focusLastInput", gridColsRef);
    }

    async Task PromptImageUpload()
    {
        Field.ImageUrl = string.Empty;
        Field.Key = string.Empty;
        Field.Label = string.Empty;
        Field.ImageWidth = null;
        Field.ImageHeight = null;
        await InvokeAsync(StateHasChanged);
        await JS.InvokeVoidAsync("triggerClick", imageInput?.Element);
    }

    async Task OnImageSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file == null) return;

        const long maxSize = 5 * 1024 * 1024;
        if (file.Size > maxSize)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "File too large",
                Detail = "Images must be 5 MB or smaller."
            });
            return;
        }

        var content = new MultipartFormDataContent();
        var stream = new StreamContent(file.OpenReadStream(maxAllowedSize: maxSize));
        content.Add(stream, "file", file.Name);
        var response = await Http.PostAsync("api/FileUpload", content);
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<UploadResult>();
            Field.ImageUrl = result?.filePath ?? string.Empty;
            var baseName = Path.GetFileNameWithoutExtension(file.Name);
            Field.Key = baseName.Replace(" ", "_").ToLowerInvariant();
            Field.Label = string.Empty;
            Field.ImageWidth = null;
            Field.ImageHeight = null;
            imageResizeInit = false;
            await InvokeAsync(StateHasChanged);
        }
        else
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Upload failed",
                Detail = "Unable to upload image."
            });
        }
    }

    [JSInvokable]
    public async Task OnImageResized(double width, double height)
    {
        Field.ImageWidth = (int)width;
        Field.ImageHeight = (int)height;
        await InvokeAsync(StateHasChanged);
    }

    class UploadResult
    {
        public string? filePath { get; set; }
    }

    public void Dispose()
    {
        objRef?.Dispose();
    }
}
