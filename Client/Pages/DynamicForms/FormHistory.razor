@page "/forms/{FormId:int}/history"
@using System.Net.Http.Json
@using System.Net
@using DynamicFormsApp.Shared.Models
@inject HttpClient Http
@inject NavigationManager Navigation
@inject CookieHelper CookieHelper

<h3 class="mb-3">Form Versions</h3>
@if (unavailableInfo != null)
{
    <FormUnavailableDisplay Info="@unavailableInfo" />
}
else if (!string.IsNullOrEmpty(deletedMessage))
{
    <div class="alert alert-warning">@deletedMessage</div>
}

@if (versions == null)
{
    <p>Loading...</p>
}
else
{
    <ul class="list-group">
        @foreach (var v in versions)
        {
            <li class="list-group-item d-flex justify-content-between align-items-center">
                <span>Version @v.Version (@(v.IsActive ? "Active" : "Archived"))</span>
                <span>
                    <a class="btn btn-sm btn-primary me-2" href="@($"/forms/{v.Id}/responses")">Responses</a>
                    <a class="btn btn-sm btn-secondary" href="@($"/forms/{v.Id}")">Open</a>
                </span>
            </li>
        }
    </ul>
}

@code {
    [Parameter] public int FormId { get; set; }
    private List<Form>? versions;
    private string? deletedMessage;
    private DeletedFormInfo? unavailableInfo;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var user = await CookieHelper.LoginStatus();
            if (string.IsNullOrEmpty(user))
            {
                var ret = Uri.EscapeDataString(Navigation.ToBaseRelativePath(Navigation.Uri));
                Navigation.NavigateTo($"login?returnUrl={ret}", true);
                return;
            }

            var resp = await Http.GetAsync($"api/forms/{FormId}/history");
            if (!resp.IsSuccessStatusCode)
            {
                if (resp.StatusCode == HttpStatusCode.Gone)
                {
                    unavailableInfo = await resp.Content.ReadFromJsonAsync<DeletedFormInfo>();
                }
                else
                {
                    deletedMessage = "Form not found.";
                }
                StateHasChanged();
                return;
            }

            versions = await resp.Content.ReadFromJsonAsync<List<Form>>();
            StateHasChanged();
        }
    }
}
