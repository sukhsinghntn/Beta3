@page "/admin"
@using System.Net.Http.Json
@using DynamicFormsApp.Shared.Models
@inject HttpClient Http
@inject NavigationManager Navigation
@inject CookieHelper CookieHelper
@inject IUserService UserService

<h3>Deleted Forms</h3>

<input class="form-control mb-3" placeholder="Search..." @bind="searchTerm" />

@if (forms == null)
{
    <p>Loading...</p>
}
else if (!FilteredForms.Any())
{
    <p>No deleted forms found.</p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Description</th>
                    <th>Owner</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var f in FilteredForms)
                {
                    <tr>
                        <td>@f.Name</td>
                        <td>@f.Description</td>
                        <td>@f.CreatedBy</td>
                        <td>
                            <button class="btn btn-sm btn-primary me-2" @onclick="() => Restore(f.Id)">Restore</button>
                            <a class="btn btn-sm btn-secondary" href="@($"/forms/{f.Id}/edit")">Edit</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private List<Form>? forms;
    private string searchTerm = string.Empty;

    private IEnumerable<Form> FilteredForms => string.IsNullOrWhiteSpace(searchTerm)
        ? forms ?? Enumerable.Empty<Form>()
        : forms?.Where(f =>
            (f.Name?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
            (f.Description?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
            (f.CreatedBy?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false))
            ?? Enumerable.Empty<Form>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var user = await CookieHelper.LoginStatus();
            if (string.IsNullOrEmpty(user))
            {
                var ret = Uri.EscapeDataString(Navigation.ToBaseRelativePath(Navigation.Uri));
                Navigation.NavigateTo($"login?returnUrl={ret}", true);
                return;
            }

            var info = await UserService.GetUserData(user);
            if (!string.Equals(info?.Department, "Information Technology", StringComparison.OrdinalIgnoreCase))
            {
                Navigation.NavigateTo("/", true);
                return;
            }

            forms = (await Http.GetFromJsonAsync<List<Form>>("api/forms/deleted"))
                ?.Where(f => !f.IsDraft)
                .ToList();
            StateHasChanged();
        }
    }

    private async Task Restore(int id)
    {
        await Http.PostAsync($"api/forms/{id}/restore", null);
        var item = forms?.FirstOrDefault(f => f.Id == id);
        if (item != null)
        {
            forms!.Remove(item);
        }
        StateHasChanged();
    }
}
