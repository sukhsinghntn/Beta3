@page "/razer"
@using System.Net.Http.Json
@using System.Text.Json
@using DynamicFormsApp.Shared.Models
@using Microsoft.JSInterop
@inject IUserService UserService
@inject HttpClient Http
@inject NavigationManager Navigation
@inject CookieHelper CookieHelper
@inject IJSRuntime JS
@implements IDisposable
@inject IJSRuntime JS

<h2 class="mb-4">Form Builder</h2>

<div class="mb-4">
    <label class="form-label">Form Name</label>
    <input type="text"
           class="form-control form-control-lg"
           placeholder="Enter your form title"
           @bind="formName" />
</div>
<div class="mb-4">
    <label class="form-label">Description</label>
    <textarea class="form-control" placeholder="Enter a description" @bind="formDescription"></textarea>
</div>

<div class="form-check form-switch mb-4">
    <input class="form-check-input" type="checkbox" id="loginToggle" @bind="requireLogin" />
    <label class="form-check-label" for="loginToggle">Require login to access form</label>
</div>
<div class="form-check form-switch mb-4">
    <input class="form-check-input" type="checkbox" id="notifyToggle" @bind="notifyOnResponse" />
    <label class="form-check-label" for="notifyToggle">Email on new response</label>
</div>
@if (notifyOnResponse)
{
    <div class="mb-3">
        <label class="form-label">Notification Email</label>
        <input class="form-control" placeholder="@currentUser?.Email" @bind="notificationEmail" />
    </div>
}

<div id="simple-fields">
@for (int index = 0; index < fields.Count; index++)
{
    var field = fields[index];
    <div class="card mb-3 shadow-sm border-start border-5 border-primary" data-idx="@index">
        <div class="card-body">
            <div class="d-flex justify-content-between align-items-center mb-2">
                <div class="d-flex align-items-center gap-2">
                    <button type="button" class="btn btn-sm btn-outline-secondary move-handle">
                        <span class="material-icons">drag_indicator</span>
                    </button>
                    <input type="text"
                           class="form-control form-control-sm"
                           placeholder="Question/Label"
                           @bind="field.Label" />
                </div>
                <div class="btn-group">
                    <button class="btn btn-sm btn-outline-danger" @onclick="() => RemoveField(field)">
                        <span class="material-icons">delete</span>
                    </button>
                </div>
            </div>

            <div class="row g-2 align-items-center">
                <div class="col-md-4">
                    <select class="form-select" @bind="field.FieldType">
                        <option value="text">Short Answer</option>
                        <option value="textarea">Paragraph</option>
                        <option value="radio">Multiple Choice</option>
                        <option value="checkbox">Checkbox</option>
                        <option value="dropdown">Dropdown</option>
                        <option value="date">Date</option>
                        <option value="time">Time</option>
                        <option value="datetime">Date Time</option>
                        <option value="scale">Linear Scale</option>
                        <option value="grid_radio">Multiple Choice Grid</option>
                        <option value="grid_checkbox">Checkbox Grid</option>
                        <option value="title">Title and Description</option>
                        <option value="section">Section</option>
                        <option value="file">Upload File</option>
                    </select>
                </div>
                <div class="col-md-4">
                    <input type="text" class="form-control"
                           placeholder="Option1, Option2, ..."
                           @bind="field.Options" />
                </div>
            </div>

            @if (field.FieldType != "title" && field.FieldType != "section")
            {
                <div class="form-check mt-2">
                    <input class="form-check-input" type="checkbox" @bind="field.IsRequired" />
                    <label class="form-check-label">Required</label>
                </div>
            }
        </div>
    </div>
}
</div>

<div class="d-grid mb-3">
    <button class="btn btn-outline-secondary" @onclick="AddField">
        + Add New Field
    </button>
</div>

<div class="d-grid">
    <button class="btn btn-primary btn-lg" @onclick="HandleSubmit">
        Publish
    </button>
</div>

@code {
    private string formName = string.Empty;
    private string formDescription = string.Empty;
    private List<DesignerField> fields = new();
    private bool requireLogin = true;
    private bool notifyOnResponse = false;
    private string notificationEmail = string.Empty;
    private UserModel? currentUser;
    private DotNetObjectReference<FormDesigner>? objRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var user = await CookieHelper.LoginStatus();
            if (string.IsNullOrEmpty(user))
            {
                var ret = Uri.EscapeDataString(Navigation.ToBaseRelativePath(Navigation.Uri));
                Navigation.NavigateTo($"login?returnUrl={ret}", true);
            }
            else
            {
                currentUser = await UserService.GetUserData(user);
                notificationEmail = currentUser?.Email ?? string.Empty;
            }

            objRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("initListSortable", "#simple-fields", objRef);
        }
    }

    class DesignerField
    {
        public string Key { get; set; } = string.Empty;
        public string Label { get; set; } = string.Empty;
        public string FieldType { get; set; } = "text";
        public string Options { get; set; } = "";
        public bool IsRequired { get; set; }
    }

    void AddField()
    {
        fields.Add(new DesignerField());
        JS.InvokeVoidAsync("initListSortable", "#simple-fields", objRef!);
    }

    void RemoveField(DesignerField field)
    {
        fields.Remove(field);
        JS.InvokeVoidAsync("initListSortable", "#simple-fields", objRef!);
    }

    [JSInvokable]
    public void OnFieldReorder(int oldIndex, int newIndex)
    {
        if (oldIndex == newIndex || oldIndex < 0 || newIndex < 0 || oldIndex >= fields.Count || newIndex >= fields.Count)
            return;
        var item = fields[oldIndex];
        fields.RemoveAt(oldIndex);
        fields.Insert(newIndex, item);
        StateHasChanged();
    }

    async Task HandleSubmit()
    {
        if (string.IsNullOrWhiteSpace(formName))
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Warning,
                Summary = "Form name required",
                Detail = "Please enter a form name before creating."
            });
            return;
        }

        foreach (var f in fields)
        {
            if (string.IsNullOrWhiteSpace(f.Label))
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Warning,
                    Summary = "Field details missing",
                    Detail = "Each field needs a label."
                });
                return;
            }

            if ((f.FieldType == "radio" || f.FieldType == "checkbox" || f.FieldType == "dropdown") &&
                f.Options.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries).Length == 0)
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Warning,
                    Summary = "Options required",
                    Detail = $"Add at least one option for '{f.Label}'."
                });
                return;
            }
        }

        var payload = new
        {
            Name = formName,
            Description = formDescription,
            RequireLogin = requireLogin,
            NotifyOnResponse = notifyOnResponse,
            NotificationEmail = string.IsNullOrWhiteSpace(notificationEmail) ? null : notificationEmail,
            IsActive = true,
            Fields = fields.Select(f => new
            {
                Label = f.Label,
                FieldType = f.FieldType,
                IsRequired = f.IsRequired,
                OptionsJson = string.IsNullOrWhiteSpace(f.Options)
                    ? null
                    : JsonSerializer.Serialize(
                        f.Options.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries)
                    )
            }).ToList()
        };

        var resp = await Http.PostAsJsonAsync("api/forms", payload);
        if (resp.IsSuccessStatusCode)
        {
            var wrapper = await resp.Content.ReadFromJsonAsync<JsonElement>();
            int newId = wrapper.GetProperty("formId").GetInt32();
            Navigation.NavigateTo($"/forms/{newId}");
        }
        else
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = "Failed to create form."
            });
        }
    }

    public void Dispose()
    {
        objRef?.Dispose();
    }
}
