@page "/forms"
@using System.Net.Http.Json
@using DynamicFormsApp.Shared.Models
@using DynamicFormsApp.Client.Pages.DynamicForms
@inject HttpClient Http
@inject NavigationManager Navigation
@inject CookieHelper CookieHelper
@inject IJSRuntime JS

<h3 class="mb-3">My Forms</h3>

@if (forms == null)
{
    <p>Loading...</p>
}
else if (!forms.Any())
{
    <p>You haven't created any forms yet.</p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Description</th>
                    <th>Publish</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var f in forms)
                {
                    <tr>
                        <td>@f.Name</td>
                        <td>@f.Description</td>
                        <td>
                            <div class="form-check form-switch">
                                <input class="form-check-input" type="checkbox" checked="@f.IsActive"
                                       @onchange="(e) => TogglePublish(f, (bool)e.Value)"
                                       title="Publish - unpublish the form and no one will be able to submit new responses" />
                            </div>
                        </td>
                        <td>
                            <a class="btn btn-sm btn-primary me-2" href="@($"/forms/{f.Id}")" title="Open - open the form">Open</a>
                            <a class="btn btn-sm btn-secondary me-2" href="@($"/forms/{f.Id}/edit")" title="Edit - modify the form">Edit</a>
                            <a class="btn btn-sm btn-secondary me-2" href="@($"/forms/{f.Id}/responses")" title="Responses - see the responses individually">Responses</a>
                            <a class="btn btn-sm btn-info me-2" href="@($"/forms/{f.Id}/summary")" title="Summary - summary of all the responses">Summary</a>
                            <button class="btn btn-sm btn-outline-secondary me-2" @onclick="() => ShareForm(f.Id)" title="Share - share the form with another user. They will be able to see the responses from the form">
                                <span class="material-icons">share</span>
                                <span class="badge bg-secondary ms-1">@GetShareCount(f.Id)</span>
                            </button>
                            @if (f.PreviousVersionId != null)
                            {
                                <a class="btn btn-sm btn-outline-secondary me-2" href="@($"/forms/{f.Id}/history")">History</a>
                            }
                            <button class="btn btn-sm btn-danger" @onclick="() => DeleteForm(f.Id)" title="Delete - delete the form">
                                <span class="material-icons">delete</span>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private List<Form>? forms;
    private Dictionary<int, int> shareCounts = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var user = await CookieHelper.LoginStatus();
            if (string.IsNullOrEmpty(user))
            {
                var ret = Uri.EscapeDataString(Navigation.ToBaseRelativePath(Navigation.Uri));
                Navigation.NavigateTo($"login?returnUrl={ret}", true);
                return;
            }

            forms = await Http.GetFromJsonAsync<List<Form>>("api/forms/mine");
            await LoadShareCounts();
            StateHasChanged();
        }
    }

    private async Task DeleteForm(int id)
    {
        var item = forms?.FirstOrDefault(f => f.Id == id);
        if (item == null)
        {
            return;
        }

        bool? confirmed = await DialogService.Confirm(
            "Are you sure you want to delete this form?",
            "Delete Form",
            new ConfirmOptions { OkButtonText = "Yes", CancelButtonText = "No" });

        if (confirmed != true)
        {
            return;
        }

        await Http.DeleteAsync($"api/forms/{id}");
        forms!.Remove(item);
        NotificationService.Notify(new NotificationMessage
        {
            Severity = NotificationSeverity.Success,
            Summary = "Form Deleted",
            Detail = item.Name
        });
        StateHasChanged();
    }

    private async Task TogglePublish(Form form, bool publish)
    {
        if (publish)
        {
            await Http.PostAsync($"api/forms/{form.Id}/activate", null);
        }
        else
        {
            await Http.PostAsync($"api/forms/{form.Id}/deactivate", null);
        }

        form.IsActive = publish;
        NotificationService.Notify(new NotificationMessage
        {
            Severity = NotificationSeverity.Success,
            Summary = publish ? "Form Published" : "Form Unpublished",
            Detail = form.Name
        });
        StateHasChanged();
    }

    private async Task ShareForm(int id)
    {
        var parameters = new Dictionary<string, object>
        {
            ["FormId"] = id
        };

        var result = await DialogService.OpenAsync<ShareFormDialog>("Share Form", parameters,
            new DialogOptions { Width = "500px" });
        if (result is bool b && b)
        {
            await LoadShareCount(id);
            StateHasChanged();
        }
    }

    private int GetShareCount(int id) => shareCounts.TryGetValue(id, out var c) ? c : 0;

    private async Task LoadShareCounts()
    {
        foreach (var f in forms ?? Enumerable.Empty<Form>())
        {
            await LoadShareCount(f.Id);
        }
    }

    private async Task LoadShareCount(int id)
    {
        var shares = await Http.GetFromJsonAsync<List<FormShare>>($"api/forms/{id}/shares");
        shareCounts[id] = shares?.Count ?? 0;
    }
}
