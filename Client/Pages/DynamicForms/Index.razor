@page "/NewForm"
@using System.Net.Http.Json
@using System.Text.Json
@using System.Collections.Generic
@using DynamicFormsApp.Client.Components
@using DynamicFormsApp.Shared
@using DynamicFormsApp.Shared.Models
@inject IJSRuntime JS
@inject HttpClient Http
@inject NavigationManager Navigation
@inject CookieHelper CookieHelper
@inject IUserService UserService

@implements IDisposable

<NavigationLock OnBeforeInternalNavigation="PromptDraft" ConfirmExternalNavigation="true" />

@if (!isPreviewMode)
{
    <h2 class="mb-2">Form Builder</h2>
    <p class="text-muted">Drag fields to reorder or move them between rows. Each row can have up to four columns.</p>
    <div class="row">
        <div class="col-md-3" style="position:sticky;top:75px;max-height:calc(100vh - 90px);overflow-y:auto;">
            <div class="mb-3 d-flex align-items-center gap-2">
                <h5 class="mb-0">Toolbox</h5>
                <div class="ms-auto d-flex gap-2">
                    <button class="btn btn-secondary btn-sm" @onclick="Undo" disabled="@(!undoStack.Any())">
                        <span class="material-icons">undo</span>
                    </button>
                    <button class="btn btn-secondary btn-sm" @onclick="Redo" disabled="@(!redoStack.Any())">
                        <span class="material-icons">redo</span>
                    </button>
                    <button class="btn btn-secondary btn-sm" @onclick="TogglePreview">Preview</button>
                </div>
            </div>
            <div class="d-flex flex-wrap gap-2">
                <div class="draggable-field" draggable="true" data-type="text">
                    <span class="material-icons me-1">short_text</span> Short Answer
                    <div class="toolbox-preview"><input class="form-control" placeholder="Short answer" disabled /></div>
                </div>
                <div class="draggable-field" draggable="true" data-type="textarea">
                    <span class="material-icons me-1">notes</span> Paragraph
                    <div class="toolbox-preview"><textarea class="form-control" placeholder="Paragraph" disabled></textarea></div>
                </div>
                <div class="draggable-field" draggable="true" data-type="radio">
                    <span class="material-icons me-1">radio_button_checked</span> Multiple Choice
                    <div class="toolbox-preview">
                        <div class="form-check"><input class="form-check-input" type="radio" disabled /><label class="form-check-label">Option</label></div>
                    </div>
                </div>
                <div class="draggable-field" draggable="true" data-type="checkbox">
                    <span class="material-icons me-1">check_box</span> Checkbox
                    <div class="toolbox-preview">
                        <div class="form-check"><input class="form-check-input" type="checkbox" disabled /><label class="form-check-label">Option</label></div>
                    </div>
                </div>
                <div class="draggable-field" draggable="true" data-type="dropdown">
                    <span class="material-icons me-1">arrow_drop_down_circle</span> Dropdown
                    <div class="toolbox-preview"><select class="form-select" disabled><option>Option</option></select></div>
                </div>
                <div class="draggable-field" draggable="true" data-type="date">
                    <span class="material-icons me-1">event</span> Date
                    <div class="toolbox-preview"><input type="date" class="form-control" disabled /></div>
                </div>
                <div class="draggable-field" draggable="true" data-type="time">
                    <span class="material-icons me-1">schedule</span> Time
                    <div class="toolbox-preview"><input type="time" class="form-control" disabled /></div>
                </div>
                <div class="draggable-field" draggable="true" data-type="datetime">
                    <span class="material-icons me-1">event_available</span> Date Time
                    <div class="toolbox-preview"><input type="datetime-local" class="form-control" disabled /></div>
                </div>
                <div class="draggable-field" draggable="true" data-type="scale">
                    <span class="material-icons me-1">linear_scale</span> Linear Scale
                    <div class="toolbox-preview">
                        <div class="d-flex gap-1">
                            @for (var i = 1; i <= 5; i++)
                            {
                                <div class="form-check form-check-inline"><input class="form-check-input" type="radio" disabled /><label class="form-check-label">@i</label></div>
                            }
                        </div>
                    </div>
                </div>
                <div class="draggable-field" draggable="true" data-type="grid_radio">
                    <span class="material-icons me-1">grid_on</span> Choice Grid
                    <div class="toolbox-preview">
                        <table class="table table-bordered table-sm mb-0"><thead><tr><th></th><th>A</th></tr></thead><tbody><tr><th scope="row">1</th><td><input type="radio" disabled /></td></tr></tbody></table>
                    </div>
                </div>
                <div class="draggable-field" draggable="true" data-type="grid_checkbox">
                    <span class="material-icons me-1">grid_view</span> Checkbox Grid
                    <div class="toolbox-preview">
                        <table class="table table-bordered table-sm mb-0"><thead><tr><th></th><th>A</th></tr></thead><tbody><tr><th scope="row">1</th><td><input type="checkbox" disabled /></td></tr></tbody></table>
                    </div>
                </div>
                <div class="draggable-field" draggable="true" data-type="grid_text">
                    <span class="material-icons me-1">table_chart</span> Text Grid
                    <div class="toolbox-preview">
                        <table class="table table-bordered table-sm mb-0"><thead><tr><th>A</th></tr></thead><tbody><tr><td><input class="form-control" disabled /></td></tr></tbody></table>
                    </div>
                </div>
                <div class="draggable-field" draggable="true" data-type="file">
                    <span class="material-icons me-1">upload_file</span> Upload File
                    <div class="toolbox-preview"><input type="file" class="form-control" disabled /></div>
                </div>
                <div class="draggable-field" draggable="true" data-type="image">
                    <span class="material-icons me-1">image</span> Image
                    <div class="toolbox-preview"><img src="/images/logo.png" style="max-width:100px" /></div>
                </div>
                <div class="draggable-field" draggable="true" data-type="statictext">
                    <span class="material-icons me-1">text_fields</span> Text
                    <div class="toolbox-preview"><p class="m-0">Sample text</p></div>
                </div>
            </div>
            <h6 class="mt-3">User Fields</h6>
            <div class="d-flex flex-wrap gap-2">
                <div class="draggable-field" draggable="true" data-type="user">
                    <span class="material-icons me-1">person</span> User Dropdown
                    <div class="toolbox-preview"><select class="form-select" disabled><option>User</option></select></div>
                </div>
                <div class="draggable-field" draggable="true" data-type="department">
                    <span class="material-icons me-1">apartment</span> Department Dropdown
                    <div class="toolbox-preview"><select class="form-select" disabled><option>Department</option></select></div>
                </div>
                <div class="draggable-field" draggable="true" data-type="location">
                    <span class="material-icons me-1">location_on</span> Location Dropdown
                    <div class="toolbox-preview"><select class="form-select" disabled><option>Location</option></select></div>
                </div>
            </div>
        </div>
        <div class="col-md-9">
            <div class="mb-4">
                <label class="form-label">Form Name</label>
                <input class="form-control form-control-lg" placeholder="Enter your form title" @bind="formName" />
            </div>
            <div class="mb-4">
                <label class="form-label">Description</label>
                <textarea class="form-control" placeholder="Enter a description" @bind="formDescription"></textarea>
            </div>
            <div class="form-check form-switch mb-4">
                <input class="form-check-input" type="checkbox" id="loginToggle" @bind="requireLogin" disabled="@(SectionsHaveRestrictions())" />
                <label class="form-check-label" for="loginToggle">Require login to access form</label>
            </div>
            <div class="form-check form-switch mb-4">
                <input class="form-check-input" type="checkbox" id="notifyToggle" @bind="notifyOnResponse" />
                <label class="form-check-label" for="notifyToggle">Email on new response</label>
            </div>
            @if (notifyOnResponse)
            {
                <div class="mb-3">
                    <label class="form-label">Notification Email</label>
                    <input class="form-control" placeholder="@currentUser?.Email" @bind="notificationEmail" />
                </div>
            }
            <div id="sections-container">
                @for (int s = 0; s < sections.Count; s++)
                {
                    var secIndex = s;
                    <div class="section-wrapper mb-4" data-section="@secIndex" id="section-@secIndex" @key="sections[secIndex]">
                        <div class="card">
                            <div class="card-header">
                                <div class="d-flex align-items-center gap-2">
                                    <span class="material-icons section-drag-handle">drag_indicator</span>
                                    <input class="form-control form-control-sm" placeholder="Section title" @bind="sections[secIndex].Title" />
                                    <div class="ms-auto d-flex align-items-center gap-2">
                                        <div class="d-flex align-items-center gap-1">
                                            <div class="form-check m-0">
                                                <input class="form-check-input" type="checkbox" checked="@sections[secIndex].UseDepartmentFilter" @onchange="e => ToggleDepartmentFilter(secIndex, e)" id="sec-@secIndex-dep" title="Check this box to filter this section to specific departments" />
                                                <label class="form-check-label" for="sec-@secIndex-dep">Department</label>
                                            </div>
                                            @if (sections[secIndex].UseDepartmentFilter)
                                            {
                                                <RadzenDropDown Data="@deptOptions" Multiple="true" CheckBoxes="true" Style="min-width:120px" Value="@sections[secIndex].Departments" ValueChanged="@((IEnumerable<string> values) => OnDepartmentsChanged(secIndex, values))" class="section-filter-select" />
                                            }
                                        </div>
                                        <div class="d-flex align-items-center gap-1">
                                            <div class="form-check m-0">
                                                <input class="form-check-input" type="checkbox" checked="@sections[secIndex].UseLocationFilter" @onchange="e => ToggleLocationFilter(secIndex, e)" id="sec-@secIndex-loc" title="Check this box to filter this section to specific locations" />
                                                <label class="form-check-label" for="sec-@secIndex-loc">Location</label>
                                            </div>
                                            @if (sections[secIndex].UseLocationFilter)
                                            {
                                                <RadzenDropDown Data="@locOptions" Multiple="true" CheckBoxes="true" Style="min-width:120px" Value="@sections[secIndex].Locations" ValueChanged="@((IEnumerable<string> values) => OnLocationsChanged(secIndex, values))" class="section-filter-select" />
                                            }
                                        </div>
                                        <div class="d-flex align-items-center gap-1">
                                            <button class="btn btn-sm btn-outline-secondary" @onclick="() => ToggleCollapse(secIndex)">
                                                <span class="material-icons">@(!sections[secIndex].IsCollapsed ? "expand_less" : "expand_more")</span>
                                            </button>
                                            <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteSection(secIndex)">
                                                <span class="material-icons">delete</span>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="card-body" hidden="@sections[secIndex].IsCollapsed">
                                <textarea class="form-control mb-3" placeholder="Section instructions" @bind="sections[secIndex].Instructions"></textarea>
                                <div id="section-@secIndex-rows">
                                    @for (int r = 0; r < sections[secIndex].Rows.Count; r++)
                                    {
                                        var rowIndex = r;
                                        <div class="row-dropzone" data-section="@secIndex" data-insert="@rowIndex"></div>
                                        <div class="row g-3 mb-3 designer-row" data-section="@secIndex" data-row="@rowIndex" @key="sections[secIndex].Rows[rowIndex]">
                                            @for (int i = 0; i < sections[secIndex].Rows[rowIndex].Fields.Count; i++)
                                            {
                                                <div class="col-12 col-md-@(12 / (sections[secIndex].Rows[rowIndex].Fields.Count == 0 ? 1 : sections[secIndex].Rows[rowIndex].Fields.Count))" data-id="@i" @key="sections[secIndex].Rows[rowIndex].Fields[i]">
                                                    <FieldEditor Field="sections[secIndex].Rows[rowIndex].Fields[i]"
                                                                 OnRemove="async f => await RemoveField(secIndex, rowIndex, f)"
                                                                 OnDuplicate="async f => await DuplicateField(secIndex, rowIndex, f)" />
                                                </div>
                                            }
                                        </div>
                                    }
                                    <div class="row-dropzone" data-section="@secIndex" data-insert="@sections[secIndex].Rows.Count"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
                <div class="section-dropzone" data-insert="@sections.Count"></div>
                <div class="d-grid mb-3">
                    <button class="btn btn-secondary" @onclick="AddSection">+ Add Section</button>
                </div>
                <div class="d-grid mb-2">
                    <button class="btn btn-secondary" @onclick="SaveDraftAndExit">Save as Draft</button>
                </div>
                <div class="d-grid">
                    <button class="btn btn-primary btn-lg" @onclick="HandleSubmit">Publish</button>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="preview-overlay">
        <div class="position-fixed top-0 end-0 m-3">
            <button class="btn btn-secondary btn-sm" @onclick="TogglePreview">Building</button>
        </div>
        <div class="p-4">
            <LivePreview Sections="sections" FormName="@formName" />
        </div>
    </div>
}

@code {
    private string formName = string.Empty;
    private string formDescription = string.Empty;
    private List<DesignerSection> sections = new() { new DesignerSection() };
    private bool isPreviewMode = false;
    private bool requireLogin = true;
    private bool notifyOnResponse = false;
    private string notificationEmail = string.Empty;
    private UserModel? currentUser;
    private DotNetObjectReference<Index>? objRef;
    private bool ignoreNavigationPrompt = false;
    private List<string> deptOptions = new();
    private List<string> locOptions = new();
    private bool restrictionAlertShown = false;

    private Stack<List<DesignerSection>> undoStack = new();
    private Stack<List<DesignerSection>> redoStack = new();

    List<DesignerSection> CloneSections(List<DesignerSection> src) =>
        JsonSerializer.Deserialize<List<DesignerSection>>(JsonSerializer.Serialize(src)) ?? new();

    void PushUndo()
    {
        undoStack.Push(CloneSections(sections));
        redoStack.Clear();
    }

    void Undo()
    {
        if (undoStack.Count == 0) return;
        redoStack.Push(CloneSections(sections));
        sections = undoStack.Pop();
        OnSectionRestrictionChanged();
    }

    void Redo()
    {
        if (redoStack.Count == 0) return;
        undoStack.Push(CloneSections(sections));
        sections = redoStack.Pop();
        OnSectionRestrictionChanged();
    }

    void TogglePreview() => isPreviewMode = !isPreviewMode;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var user = await CookieHelper.LoginStatus();
            if (string.IsNullOrEmpty(user))
            {
                var ret = Uri.EscapeDataString(Navigation.ToBaseRelativePath(Navigation.Uri));
                Navigation.NavigateTo($"login?returnUrl={ret}", true);
                return;
            }

            currentUser = await UserService.GetUserData(user);
            notificationEmail = currentUser?.Email ?? string.Empty;
            deptOptions = await UserService.GetDepartments();
            locOptions = await UserService.GetLocations();
            objRef ??= DotNetObjectReference.Create(this);
        }

        if (!isPreviewMode)
        {
            objRef ??= DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("initSectionSortable", "#sections-container", objRef);
            for (int i = 0; i < sections.Count; i++)
            {
                await JS.InvokeVoidAsync("initSortable", $"#section-{i}-rows", objRef);
            }
            await JS.InvokeVoidAsync("initFieldDragDrop", "#sections-container", objRef);
            await JS.InvokeVoidAsync("initToolboxPreview");
        }
    }

    bool SectionsHaveRestrictions() => sections.Any(s => s.Departments.Any() || s.Locations.Any());

    void OnSectionRestrictionChanged()
    {
        if (SectionsHaveRestrictions())
        {
            if (!requireLogin)
                requireLogin = true;
            if (!restrictionAlertShown)
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Warning,
                    Summary = "Login required",
                    Detail = "Section visibility filters require login to access the form."
                });
                restrictionAlertShown = true;
            }
        }
        else
        {
            restrictionAlertShown = false;
        }
    }

    void OnDepartmentsChanged(int secIndex, IEnumerable<string> values)
    {
        sections[secIndex].Departments = values.ToList();
        OnSectionRestrictionChanged();
    }

    void OnLocationsChanged(int secIndex, IEnumerable<string> values)
    {
        sections[secIndex].Locations = values.ToList();
        OnSectionRestrictionChanged();
    }

    void ToggleDepartmentFilter(int secIndex, ChangeEventArgs e)
    {
        sections[secIndex].UseDepartmentFilter = e.Value is bool b && b;
        if (!sections[secIndex].UseDepartmentFilter)
            sections[secIndex].Departments.Clear();
        OnSectionRestrictionChanged();
    }

    void ToggleLocationFilter(int secIndex, ChangeEventArgs e)
    {
        sections[secIndex].UseLocationFilter = e.Value is bool b && b;
        if (!sections[secIndex].UseLocationFilter)
            sections[secIndex].Locations.Clear();
        OnSectionRestrictionChanged();
    }


    [JSInvokable]
    public void OnSortUpdate(int fromSection, int fromRow, int oldIndex, int toSection, int toRow, int newIndex)
    {
        if (fromSection < 0 || fromSection >= sections.Count || toSection < 0 || toSection >= sections.Count)
            return;

        PushUndo();

        if (fromRow < 0 || fromRow >= sections[fromSection].Rows.Count || toRow < 0 || toRow >= sections[toSection].Rows.Count)
            return;

        var source = sections[fromSection].Rows[fromRow].Fields;
        var dest = sections[toSection].Rows[toRow].Fields;

        if (oldIndex < 0 || oldIndex >= source.Count || newIndex < 0 || newIndex > dest.Count)
            return;

        if (fromRow != toRow && dest.Count >= 4)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Warning,
                Summary = "Column limit reached",
                Detail = "A row can contain at most four columns."
            });
            StateHasChanged();
            return;
        }

        var moved = source[oldIndex];
        source.RemoveAt(oldIndex);

        // clamp insert index to avoid out of range errors when moving within the same row
        int insertIndex = Math.Min(newIndex, dest.Count);
        dest.Insert(insertIndex, moved);
        if (source.Count == 0 && sections[fromSection].Rows.Count > 1)
        {
            sections[fromSection].Rows.RemoveAt(fromRow);
        }
        StateHasChanged();
        JS.InvokeVoidAsync("initSortable", $"#section-{fromSection}-rows", objRef!);
        if (fromSection != toSection)
        {
            JS.InvokeVoidAsync("initSortable", $"#section-{toSection}-rows", objRef!);
        }
    }

    async Task AddSection()
    {
        PushUndo();
        sections.Add(new DesignerSection());
        await JS.InvokeVoidAsync("initSectionSortable", "#sections-container", objRef!);
        await JS.InvokeVoidAsync("initSortable", $"#section-{sections.Count - 1}-rows", objRef!);
    }

    DesignerField CreateField(string fieldType) => new DesignerField
    {
        FieldType = fieldType,
        Key = fieldType switch
        {
            "user" => "select a user",
            "department" => "department",
            "location" => "location",
            _ => string.Empty
        },
        Label = fieldType switch
        {
            "user" => "Select a user",
            "department" => "Department",
            "location" => "Location",
            "statictext" => "Text",
            _ => string.Empty
        },
        Placeholder = fieldType == "text" ? "Short answer" :
                      fieldType == "textarea" ? "Paragraph" :
                      fieldType == "dropdown" ? "Select one from dropdown" : string.Empty
    };

    async Task RemoveField(int section, int row, DesignerField field)
    {
        PushUndo();
        sections[section].Rows[row].Fields.Remove(field);
        if (sections[section].Rows[row].Fields.Count == 0 && sections[section].Rows.Count > 1)
        {
            sections[section].Rows.RemoveAt(row);
        }
        await JS.InvokeVoidAsync("initSortable", $"#section-{section}-rows", objRef!);
    }

    async Task DuplicateField(int section, int row, DesignerField field)
    {
        PushUndo();
        var copy = new DesignerField
        {
            Key = field.Key,
            Label = field.Label,
            FieldType = field.FieldType,
            IsRequired = field.IsRequired,
            CharLimit = field.CharLimit,
            MinCharLimit = field.MinCharLimit,
            OptionItems = new List<string>(field.OptionItems),
            GridColumns = new List<string>(field.GridColumns),
            GridRows = new List<string>(field.GridRows),
            ScaleMin = field.ScaleMin,
            ScaleMax = field.ScaleMax,
            Placeholder = field.Placeholder,
            ImageUrl = field.ImageUrl,
            ImageWidth = field.ImageWidth,
            ImageHeight = field.ImageHeight
        };
        var list = sections[section].Rows[row].Fields;
        if (list.Count >= 4)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Warning,
                Summary = "Column limit reached",
                Detail = "A row can contain at most four columns."
            });
            return;
        }

        list.Insert(list.IndexOf(field) + 1, copy);
        await JS.InvokeVoidAsync("initSortable", $"#section-{section}-rows", objRef!);
    }

    [JSInvokable]
    public async Task AddFieldFromDrop(string fieldType, int sectionIndex, int rowIndex, int colIndex)
    {
        PushUndo();
        if (sectionIndex < 0 || sectionIndex >= sections.Count)
            sectionIndex = sections.Count - 1;
        if (rowIndex < 0 || rowIndex >= sections[sectionIndex].Rows.Count)
            rowIndex = sections[sectionIndex].Rows.Count - 1;

        var list = sections[sectionIndex].Rows[rowIndex].Fields;
        var field = CreateField(fieldType);

        if (list.Count >= 4)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Warning,
                Summary = "Column limit reached",
                Detail = "A row can contain at most four columns."
            });
            StateHasChanged();
            return;
        }

        int newIndex;
        if (colIndex < 0 || colIndex > list.Count)
        {
            list.Add(field);
            newIndex = list.Count - 1;
        }
        else
        {
            list.Insert(colIndex, field);
            newIndex = colIndex;
        }

        StateHasChanged();
        await JS.InvokeVoidAsync("initSortable", $"#section-{sectionIndex}-rows", objRef!);
        await JS.InvokeVoidAsync("focusFieldLabel", sectionIndex, rowIndex, newIndex);
    }

    [JSInvokable]
    public async Task AddRowFromDrop(string fieldType, int sectionIndex, int insertIndex)
    {
        PushUndo();
        if (sectionIndex < 0 || sectionIndex >= sections.Count)
            sectionIndex = sections.Count - 1;
        if (insertIndex < 0 || insertIndex > sections[sectionIndex].Rows.Count)
            insertIndex = sections[sectionIndex].Rows.Count;

        var row = new DesignerRow();
        row.Fields.Add(CreateField(fieldType));
        sections[sectionIndex].Rows.Insert(insertIndex, row);
        StateHasChanged();
        await JS.InvokeVoidAsync("initSortable", $"#section-{sectionIndex}-rows", objRef!);
        await JS.InvokeVoidAsync("focusFieldLabel", sectionIndex, insertIndex, 0);
    }

    [JSInvokable]
    public void OnSectionReorder(int oldIndex, int newIndex)
    {
        if (oldIndex == newIndex || oldIndex < 0 || newIndex < 0 || oldIndex >= sections.Count || newIndex >= sections.Count)
            return;
        PushUndo();
        var item = sections[oldIndex];
        sections.RemoveAt(oldIndex);
        sections.Insert(newIndex, item);
        StateHasChanged();
    }

    void ToggleCollapse(int index)
    {
        sections[index].IsCollapsed = !sections[index].IsCollapsed;
    }

    async Task DeleteSection(int index)
    {
        bool? confirm = await DialogService.Confirm(
            "Delete this section and all its fields?",
            "Delete Section",
            new ConfirmOptions { OkButtonText = "Yes", CancelButtonText = "No" });
        if (confirm == true)
        {
            PushUndo();
            sections.RemoveAt(index);
            await JS.InvokeVoidAsync("initSectionSortable", "#sections-container", objRef!);
            OnSectionRestrictionChanged();
        }
    }

    List<object> BuildFieldPayload()
    {
        var list = new List<object>();
        int rowCounter = 0;
        foreach (var sec in sections)
        {
            list.Add(new
            {
                Key = sec.Key,
                Label = sec.Title,
                FieldType = "section",
                IsRequired = false,
                Row = rowCounter,
                Column = 0,
                OptionsJson = (string.IsNullOrWhiteSpace(sec.Instructions) && sec.Departments.Count == 0 && sec.Locations.Count == 0)
                    ? null
                    : JsonSerializer.Serialize(new { Instructions = sec.Instructions, Departments = sec.Departments, Locations = sec.Locations })
            });
            rowCounter++;

            foreach (var row in sec.Rows)
            {
                for (int c = 0; c < row.Fields.Count; c++)
                {
                    var f = row.Fields[c];
                    var opts = f.OptionItems.Where(o => !string.IsNullOrWhiteSpace(o)).ToList();
                    var rowsList = f.GridRows.Where(o => !string.IsNullOrWhiteSpace(o)).ToList();
                    var colsList = f.GridColumns.Where(o => !string.IsNullOrWhiteSpace(o)).ToList();
                    string? optionsJson = opts.Count > 0 ? JsonSerializer.Serialize(opts)
                        : f.FieldType == "grid_text" && colsList.Count > 0 ? JsonSerializer.Serialize(new { Columns = colsList })
                        : rowsList.Count > 0 || colsList.Count > 0 ? JsonSerializer.Serialize(new { Rows = rowsList, Columns = colsList })
                        : f.FieldType == "scale" ? JsonSerializer.Serialize(new { Min = f.ScaleMin, Max = f.ScaleMax })
                        : !string.IsNullOrWhiteSpace(f.Instructions) ? JsonSerializer.Serialize(new { Instructions = f.Instructions })
                        : null;
                    list.Add(new
                    {
                        f.Key,
                        f.Label,
                        f.FieldType,
                        f.Placeholder,
                        f.CharLimit,
                        f.MinCharLimit,
                        f.IsRequired,
                        f.ImageUrl,
                        f.ImageWidth,
                        f.ImageHeight,
                        Row = rowCounter,
                        Column = c,
                        OptionsJson = optionsJson
                    });
                }
                rowCounter++;
            }
        }
        return list;
    }

    async Task HandleSubmit()
    {
        if (string.IsNullOrWhiteSpace(formName))
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Warning,
                Summary = "Form name required",
                Detail = "Please enter a form name before creating."
            });
            return;
        }

        if (SectionsHaveRestrictions())
            requireLogin = true;

        foreach (var f in sections.SelectMany(s => s.Rows).SelectMany(r => r.Fields))
        {
            if (f.FieldType != "image" && string.IsNullOrWhiteSpace(f.Label))
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Warning,
                    Summary = "Field details missing",
                    Detail = "Each field needs a label."
                });
                return;
            }

            if ((f.FieldType == "radio" || f.FieldType == "checkbox" || f.FieldType == "dropdown") &&
                !f.OptionItems.Any(o => !string.IsNullOrWhiteSpace(o)))
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Warning,
                    Summary = "Options Required",
                    Detail = $"Add at least one option for '{f.Label}'."
                });
                return;
            }

            if ((f.FieldType == "grid_radio" || f.FieldType == "grid_checkbox") &&
                (!f.GridRows.Any(r => !string.IsNullOrWhiteSpace(r)) || !f.GridColumns.Any(c => !string.IsNullOrWhiteSpace(c))))
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Warning,
                    Summary = "Options Required",
                    Detail = $"Add at least one row and column for '{f.Label}'."
                });
                return;
            }

            if (f.FieldType == "grid_text" && !f.GridColumns.Any(c => !string.IsNullOrWhiteSpace(c)))
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Warning,
                    Summary = "Options Required",
                    Detail = $"Add at least one column for '{f.Label}'."
                });
                return;
            }
        }

        var payload = new
        {
            Name = formName,
            Description = formDescription,
            RequireLogin = requireLogin,
            NotifyOnResponse = notifyOnResponse,
            NotificationEmail = string.IsNullOrWhiteSpace(notificationEmail) ? null : notificationEmail,
            IsActive = true,
            Fields = BuildFieldPayload()
        };

        var resp = await Http.PostAsJsonAsync("api/forms", payload);
        if (resp.IsSuccessStatusCode)
        {
            var wrapper = await resp.Content.ReadFromJsonAsync<JsonElement>();
            int newId = wrapper.GetProperty("formId").GetInt32();
            ignoreNavigationPrompt = true;
            Navigation.NavigateTo($"/forms/{newId}");
        }
    }

    private async Task SaveDraftAsync()
    {
        if (SectionsHaveRestrictions())
            requireLogin = true;

        var payload = new
        {
            Name = formName,
            Description = formDescription,
            RequireLogin = requireLogin,
            NotifyOnResponse = notifyOnResponse,
            NotificationEmail = string.IsNullOrWhiteSpace(notificationEmail) ? null : notificationEmail,
            IsDraft = true,
            Fields = BuildFieldPayload()
        };

        await Http.PostAsJsonAsync("api/forms", payload);
    }

    private async Task SaveDraftAndExit()
    {
        await SaveDraftAsync();
        await DialogService.Alert("Draft saved! You can return later to edit or publish it.", "Draft Saved");
        ignoreNavigationPrompt = true;
        Navigation.NavigateTo("/");
    }

    private async Task PromptDraft(LocationChangingContext context)
    {
        if (ignoreNavigationPrompt)
        {
            return;
        }

        if (sections.SelectMany(s => s.Rows).SelectMany(r => r.Fields).Count() >= 2)
        {
            context.PreventNavigation();
            bool? save = await DialogService.Confirm(
                "Save this form as a draft before leaving?",
                "Save Draft",
                new ConfirmOptions { OkButtonText = "Yes", CancelButtonText = "No" });

            if (save == true)
            {
                await SaveDraftAsync();
            }

            if (save != null)
            {
                ignoreNavigationPrompt = true;
                Navigation.NavigateTo(context.TargetLocation);
            }
        }
    }

    public void Dispose()
    {
        objRef?.Dispose();
    }
}
