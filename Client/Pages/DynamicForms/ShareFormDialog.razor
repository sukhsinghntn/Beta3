@inject HttpClient Http
@inject DialogService DialogService
@inject NotificationService NotificationService
@inject IUserService UserService
@using System.Net.Http.Json
@using DynamicFormsApp.Shared.Models

<RadzenCard Style="width:100%;max-width:500px">
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Gap="0.5rem" class="mb-3">
        <RadzenLabel Text="Select User" Component="UserDropDown" />
        <RadzenDropDown Name="UserDropDown"
                        Data="@users" TItem="UserModel"
                        TextProperty="DisplayName" ValueProperty="UserName"
                        AllowFiltering="true" AllowClear="true"
                        LoadData="@LoadUsers"
                        @bind-Value="selectedUser"
                        Style="width:100%; max-width:400px;" Placeholder="Search user..." />
    </RadzenStack>
    @if (shares?.Count > 0)
    {
        <div class="mb-3">
            <p class="fw-bold mb-1">Currently Shared With:</p>
            <ul class="list-group">
                @foreach (var s in shares)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <span>@s.DisplayName (@s.UserName)</span>
                        <button class="btn btn-sm btn-outline-danger" @onclick="() => RemoveShare(s.UserName)"><span class="material-icons">close</span></button>
                    </li>
                }
            </ul>
        </div>
    }
    <div class="d-flex justify-content-end">
        <RadzenButton Text="Cancel" ButtonStyle="ButtonStyle.Secondary" Click="@Cancel" class="me-2" />
        <RadzenButton Text="Share" ButtonStyle="ButtonStyle.Primary" Click="@Share" />
    </div>
</RadzenCard>

@code {
    [Parameter] public int FormId { get; set; }

    private List<UserModel>? users;
    private List<UserModel>? shares;
    private string? selectedUser;

    protected override async Task OnInitializedAsync()
    {
        users = new List<UserModel>();
        var raw = await Http.GetFromJsonAsync<List<FormShare>>($"api/forms/{FormId}/shares")
            ?? new List<FormShare>();
        shares = new List<UserModel>();
        foreach (var sh in raw)
        {
            var u = await UserService.GetUserData(sh.UserName);
            shares.Add(new UserModel { UserName = sh.UserName, DisplayName = u?.DisplayName ?? sh.UserName });
        }
    }

    private async Task Share()
    {
        if (string.IsNullOrWhiteSpace(selectedUser))
        {
            await DialogService.Alert("Please select a user.", "Share Form");
            return;
        }

        var dto = new ShareFormDto { UserName = selectedUser };
        await Http.PostAsJsonAsync($"api/forms/{FormId}/share", dto);
        var userData = users?.FirstOrDefault(u => u.UserName == selectedUser);
        shares?.Add(new UserModel { UserName = selectedUser!, DisplayName = userData?.DisplayName ?? selectedUser });
        NotificationService.Notify(new NotificationMessage
        {
            Severity = NotificationSeverity.Success,
            Summary = "Form Shared",
            Detail = selectedUser
        });
        DialogService.Close(true);
    }

    void Cancel() => DialogService.Close(false);


    private async Task LoadUsers(LoadDataArgs args)
    {
        var term = args.Filter ?? string.Empty;
        users = await UserService.SearchUsers(term);
    }

    private async Task RemoveShare(string userName)
    {
        await Http.DeleteAsync($"api/forms/{FormId}/shares/{userName}");
        var item = shares?.FirstOrDefault(s => s.UserName == userName);
        if (item != null)
        {
            shares!.Remove(item);
            StateHasChanged();
        }
    }
}
