@page "/"
@inject NavigationManager Navigation
@inject CookieHelper CookieHelper
@inject HttpClient Http
@using DynamicFormsApp.Shared.Models

<div class="text-center my-5">
    <h1 class="mb-3">Dynamic Forms</h1>
    <p class="text-muted">Create, share and manage forms with ease</p>
</div>

<div class="row row-cols-1 row-cols-md-4 g-3 mb-5 justify-content-center">
    <div class="col" style="max-width:200px;">
        <a href="/NewForm" class="text-decoration-none">
            <div class="card text-center h-100">
                <div class="card-body">
                    <span class="material-icons" style="font-size:3rem;">add_circle</span>
                    <p class="text-muted mb-0">Create Form</p>
                </div>
            </div>
        </a>
    </div>
    <div class="col" style="max-width:200px;">
        <a href="/forms" class="text-decoration-none">
            <div class="card text-center h-100">
                <div class="card-body">
                    <h3>@myForms</h3>
                    <p class="text-muted mb-0">My Forms</p>
                </div>
            </div>
        </a>
    </div>
    <div class="col" style="max-width:200px;">
        <a href="/draftforms" class="text-decoration-none">
            <div class="card text-center h-100">
                <div class="card-body">
                    <h3>@drafts</h3>
                    <p class="text-muted mb-0">Drafts</p>
                </div>
            </div>
        </a>
    </div>
    <div class="col" style="max-width:200px;">
        <a href="/sharedforms" class="text-decoration-none">
            <div class="card text-center h-100">
                <div class="card-body">
                    <h3>@shared</h3>
                    <p class="text-muted mb-0">Shared With Me</p>
                </div>
            </div>
        </a>
    </div>
</div>


@code {
    private int myForms;
    private int drafts;
    private int shared;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var user = await CookieHelper.LoginStatus();
            if (string.IsNullOrEmpty(user))
            {
                var ret = Uri.EscapeDataString(Navigation.ToBaseRelativePath(Navigation.Uri));
                Navigation.NavigateTo($"login?returnUrl={ret}", true);
            }
            else
            {
                var mine = await Http.GetFromJsonAsync<List<Form>>("api/forms/mine");
                myForms = mine?.Count(f => f.IsActive) ?? 0;
                var draftsList = await Http.GetFromJsonAsync<List<Form>>("api/forms/drafts");
                drafts = draftsList?.Count ?? 0;
                var sharedList = await Http.GetFromJsonAsync<List<Form>>("api/forms/shared");
                shared = sharedList?.Count ?? 0;
                StateHasChanged();
            }
        }
    }
}
